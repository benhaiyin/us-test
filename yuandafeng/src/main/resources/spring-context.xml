<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd"
	default-lazy-init="true">

	<description>Spring Configuration</description>
	<!-- 开启@AspectJ AOP代理 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />
	<!-- 任务调度器 -->
	<task:scheduler id="scheduler" pool-size="10" />
	<!-- 任务执行器 -->
	<task:executor id="executor" pool-size="10" />
	<!--开启注解调度支持 @Async @Scheduled -->
	<task:annotation-driven executor="executor" scheduler="scheduler" proxy-target-class="true" />
	
	<!-- 加载配置属性文件 -->
	<!-- context:property-placeholder ignore-unresolvable="true" location="classpath*:/mis.properties" / -->
    <bean id="propertyConfiger"  class="com.ydf.core.security.spring.DecryptPropertyPlaceholderConfigurer">
   		 <property name="ignoreUnresolvablePlaceholders" value="true"/>
         <property name="locations">
             <list>
                 <value>classpath*:/mis.properties</value>
             </list>
         </property>     
    </bean>
	
	<!-- 使用Annotation自动注册Bean，解决事务失效问题，在主容器中不扫描以@Controller注解，在SpringMVC中只扫描@Controller注解 -->
	<context:component-scan base-package="com.ydf.*">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	<!-- 数据源配置，使用druid数据连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${jdbc.pool.minIdle}" />
		<property name="minIdle" value="${jdbc.pool.minIdle}" />
		<property name="maxActive" value="${jdbc.pool.maxActive}" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="select 'x' from dual" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" />
		<property name="connectionInitSqls" value="set names utf8mb4;"/>
	</bean>
	<!-- Mybatis begin -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
		<property name="typeAliasesPackage" value="com.ydf.model" />
		<!-- mybatis 公共的配置 -->
		<property name="configLocation" value="classpath:/mybatis-config.xml" />
		<!-- 自动扫描映射文件 -->
		<property name="mapperLocations" value="classpath:/mybatis/**/*Mapper.xml" />
	</bean>
	<!-- 扫描basePackage下所有以@MyBatisRepository注解的接口 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<property name="basePackage" value="com.us.dao" />
		<property name="annotationClass"
			value="com.us.dao.datasource.MyBatisRepository" />
	</bean>
	   
	<!-- Mybatis end -->
	<!-- 配置事务管理器 -->
	<bean id="transactionManager" class="com.us.dao.datasource.DataTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	<import resource="classpath:cache/spring-config-cache.xml" />
	
	<!-- <import resource="classpath:security/spring-config-shiro.xml" /> -->
</beans>